---
- hosts: all
  gather_facts: False
  
  tasks:
  - name: install python 2
    raw: test -e /usr/bin/python || (apt -y update && apt install -y python)
    register: test
    changed_when: test.stdout

  - name: remove require tty
    lineinfile: regexp="^\s+\w+\s+requiretty" dest=/etc/sudoers state=absent


- name: Prepare nodes
  hosts: all
  handlers:
    - name: restart ufw
      service: name=ufw state=restarted

  pre_tasks:
    - name: update apt cache if needed
      apt: update_cache=yes cache_valid_time=3600

    - name: install common packages
      apt: pkg={{ item }} state=present update_cache=yes
      with_items:
        - git
        - htop
        - unzip
        - python-pip
        - acl
        - python-pkg-resources

    - name: install python libs
      pip:
        name: "{{ item }}"
      with_items:
        - passlib

    - name: Add web user
      user:
        name: web
        shell: /bin/bash
  tasks:
    - name: incude custom variables
      include_vars:
        file: "{{ var_file }}"
      when: var_file is defined

- name: Prepare certificates
  hosts: all
  pre_tasks:
    - name: certificates direcotry
      file:
        path: "{{ cert_dir }}"
        state: directory
        mode: 0755

    - name: create self-signed certificate
      command: >
        openssl req -x509 -nodes -subj '/CN={{ fqdn }}' -days 365
        -newkey rsa:4096 -sha256 -keyout {{ cert_dir }}/{{ fqdn }}.key -out {{ cert_dir }}/{{ fqdn }}.crt
      args:
        creates: "{{ cert_dir }}/{{ fqdn }}.crt"

# Playbook for GoRTC web server.
# Ubuntu 16.04 is expected.
- hosts: all
  roles:
    - gortc.go
    - gortc.nginx
  vars:
    nginx_vhosts:
      - listen: "[::]:443 ipv6only=off ssl http2"
        server_name: "{{ fqdn }}"
        state: "present"
        file: "web.conf"
        template: "{{ nginx_vhost_template }}"
        acme: true
        extra_parameters: |
          location / {
            proxy_pass http://localhost:3000;
            http2_push_preload on;
          }
          ssl_certificate       {{ cert_dir }}/{{ fqdn }}.crt;
          ssl_certificate_key   {{ cert_dir }}/{{ fqdn }}.key;
          ssl_protocols         TLSv1.1 TLSv1.2;
      - listen: "80"
        acme: true
        server_name: "{{ fqdn }}"
        extra_parameters: |
          location / {
            return 301 https://{{ fqdn }}$request_uri;
          }
        filename: "pcl.80.conf"
  tasks:
    - name: download tokei
      unarchive:
        src: https://github.com/Aaronepower/tokei/releases/download/v7.0.3/tokei-v7.0.3-x86_64-unknown-linux-gnu.tar.gz
        dest: /usr/local/bin
        remote_src: yes
        creates: /usr/local/bin/tokei

    - name: install vgo
      become: true
      become_user: web
      shell: /usr/local/go/bin/go get golang.org/x/vgo
      register: vgo
      changed_when: vgo.stderr

    - name: install web
      become: true
      become_user: web
      notify: restart web
      git:
        repo: https://github.com/gortc/web.git
        dest: /home/web/go/src/github.com/gortc/web

    - name: build
      notify: restart web
      become: true
      become_user: web
      shell: /home/web/go/bin/vgo build -v -o gortc-web
      args:
        chdir: /home/web/go/src/github.com/gortc/web
      register: build
      changed_when: build.stderr

    - name: install systemd service file
      template: src=web.service.j2 dest=/etc/systemd/system/web.service
      notify: restart web

    - name: ensure that service is enabled and started
      systemd:
        name: web
        state: started
        enabled: yes
        daemon_reload: yes
  handlers:
    - name: restart web
      service: name=web state=restarted


# Enable LetsEncrypt.
- name: LetsEncrypt certificates
  hosts: lego
  tasks:
    - name: acme direcotry
      file:
        path: "{{ nginx_acme_dir }}"
        state: directory
        mode: 0755

    - name: download lego
      unarchive:
        src: https://github.com/xenolf/lego/releases/download/{{ lego_version }}/lego_linux_amd64.tar.xz
        dest: /usr/local/bin
        remote_src: yes
        creates: /usr/local/bin/lego_linux_amd64

    - name: install lego services
      template:
        src: "{{ item }}"
        dest: /etc/systemd/system/
      with_items:
        - lego.service
        - lego.timer

    - name: retrieve letsencrypt certificates
      command: /usr/local/bin/lego_linux_amd64 -a -s {{ lego_server }} -d={{ fqdn }} -m={{ lego_email }} --webroot={{ nginx_acme_dir }} --path={{ lego_dir }} run
      args:
        creates: "{{ cert_dir }}/{{ fqdn }}.json"
      notify: reload nginx

    - name: check lego certificate
      stat:
        path: "{{ cert_dir }}/{{ fqdn }}.json"
      register: lego_cert

    - assert:
        that:
          - lego_cert.stat.exists

    - name: ensure that lego timer is enabled and started
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
        daemon_reload: yes
      with_items:
        - lego.timer

  handlers:
    - name: reload nginx
      service: name=nginx state=reloaded
